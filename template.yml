# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-test-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Env:
    Type: String
    Description: Environment
    AllowedValues: [prod, stg, dev]
    Default: dev
  ImageBucket:
    Type: String
    Description: S3 Bucket where original images are placed

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: hello-from-lambda.js
  ResizeImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/app.lambdaHandler
      Runtime: nodejs14.x
      MemorySize: 256
      Timeout: 30
      Description: A Lambda function that returns a resized image.
      Events:
        ResizeImage:
          Type: Api
          Properties:
            RestApiId: !Ref ImageProcessingApi
            Path: /images/{proxy+}
            Method: get
      Environment:
        Variables:
          IMAGE_BUCKET:
            Ref: ImageBucket
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref ImageBucket

  ImageProcessingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      DefinitionBody:
        swagger: 2.0
        schemes:
          - https
        info:
          title: !Sub image-processing-api-${Env}
          description: !Sub image-processing-api-${Env}
          version: 1.0.0
        basePath: !Sub /${Env}
        paths:
          /images/{proxy+}:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResizeImageFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
          - "*/*"

Outputs:
  ImageProcessingApi:
    Description: Image Processing Api Endpoint
    Value: !Ref ImageProcessingApi
  ResizeImageFunction:
    Description: "Resize Image Lambda Function ARN"
    Value: !Ref ResizeImageFunction